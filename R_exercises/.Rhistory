# contour plot
contour(z=power.b, x=sample_size, y=b, col="blue",  ylab="slope", xlab="Sample Size")
#fancy contour
filled.contour(z=power.b, x=sample_size, y=b,
ylim=c(min(b),max(b)), xlim=c(min(sample_size), max(sample_size)),
xlab="Sample Size", ylab="slope", color = topo.colors)
q()
# initialize a vector of length 1
x <- NA
#system.time( YOUR FOR LOOP HERE)
system.time(
for (i in 1:10000) {x[i] <- i^2})
n <- 10000 # just run this once, each time you change n
rm(x)
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5, pch = 20)
# use the `lm` function to fit a linear model (including   a regression like here)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
plot(y ~ x, pch = 20, cex = 1.5)
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5)
# use the `lm` function to fit a linear model (including   a regression like here)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.3
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5)
# use the `lm` function to fit a linear model (including   a regression like here)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
rm(list=ls())
nsims = 1000
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
pvals <- rep(NA, nsims)
for (p in 1:nsims) {
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
mod_1 <- lm(y ~ x)
pvals[p] <- summary(mod_1)$coef[2,4]}
# proportion less than 0.05?
sum(pvals < 0.05)/length(pvals) # estimate of the power.
hist(pvals)
rm(list=ls())
nsims = 100
pow_sim_1 <- function(a, b, n,  std_dev){
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = std_dev )
mod_1 <- lm(y ~ x)
return(summary(mod_1)$coef[2,4])
}
pvals <- replicate(n = nsims, pow_sim_1(a = 3, b = 0.3, n = 20, std_dev =1 ))
length(pvals)
sum(pvals < 0.05)/length(pvals)
hist(pvals)
rm(list=ls())
nsims = 1000
pow_sim_1 <- function(a, b, n,  std_dev){
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = std_dev )
mod_1 <- lm(y ~ x)
return(summary(mod_1)$coef[2,4])
}
pvals <- replicate(n = nsims, pow_sim_1(a = 3, b = 0.3, n = 20, std_dev =1 ))
length(pvals)
sum(pvals < 0.05)/length(pvals)
hist(pvals)
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
reads <- c(read_1, read_2, read_3)
for (i in read_1) {
print(i)
}
?strsplit
read_1_char <- as.character(unlist(read_1_split))
read_1_split <- strsplit(read_1, split = "", fixed = T) # a list
read_1_split
read_1_char <- as.character(unlist(read_1_split))
mode(read_1_char)
for (i in read_1_split){
print(i)
}
for (i in read_1_char){
print(i)
}
length(reads)
nchar(reads)
site_freq <- table(read_1_split)/lengths(read_1_split)
print(site_freq, digits = 2)
site_freq_alt <- table(read_1_char)/length(read_1_char)
print(site_freq_alt, digits = 2)
BaseFrequencies <- function(x) {
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
?list
basefreq <- sapply(reads, BaseFrequencies, USE.NAMES = F)
print(basefreq, digits = 2)
q()
blast(read_1)
blast(read_1, program = "blastn")
blastn(read_1)
reads = c(read_1, read_2, read_3)
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
reads = c(read_1, read_2, read_3)
length(reads)
length(reads[])
length(reads[1])
nchar(reads)
read_1_split <- strsplit(read_1, split = "", fixed = T)
View(read_1_split)
length(read_1_split)
length(read_1_split[1])
length(read_1_split[1,])
length(read_1_split[,1])
length(read_1_split[])
print(read_1_split[1,2])
print(read_1_split[2,1])
read_1_split[[1]]
read_1_split[[1]][1]
length(read_1_split[[1]])
for (char in read_1_split[[1]]){
print(char)
}
for (char in read_1_split[[1]]){
rebuilt = c(rebuilt,char)
}
rebuilt =NA
for (char in read_1_split[[1]]){
rebuilt = c(rebuilt,char)
}
rebuilt =NA
for (char in read_1_split[[1]]){
rebuilt = (paste(rebuilt,char))
}
paste(read_1_split)
read_1_split
paste(read_1_split[[1]])
rebuilt = paste(read_1_split[[1]], collapse = "")
freq = as.table(n=4)
freq = as.table(4)
freq
freq = matrix(ncol = 4)
freq = matrix(0,ncol = 4)
rebuilt
read_1_split
rebuilt = paste(read_1_split[[1]], collapse = ",")
rebuilt
rebuilt = as.character(read_1_split)
rebuilt = as.character(read_1_split[[1]])
table(read_1_split)
table(rebuilt)
freq = table(rebuilt)
freq[1]
freq[1] = freq[1]+1
freq[1]
freq = table(rebuilt)
freq[] = freq[]/length(rebuilt)
freq[]
countFreq = function(input){
freq <- as.character(strsplit(input, split = "", fixed = T))
freq = table(freq)/length(freq)
return(freq)
}
countFreq(read_1)
freq <- as.character(strsplit(input, split = "", fixed = T))
lengths(reads)
freq <- as.character(strsplit(read_1, split = "", fixed = T))
freq <- strsplit(read_1, split = "", fixed = T)
View(freq)
freq <- as.character(strsplit(read_1, split = "", fixed = T)[[1])
freq <- as.character(strsplit(read_1, split = "", fixed = T)[[1])
freq <- as.character(strsplit(read_1, split = "", fixed = T)[[1]])
countFreq = function(input){
freq <- as.character(strsplit(read_1, split = "", fixed = T)[[1]])
freq = table(freq)/length(freq)
return(freq)
}
countFreq(read_1)
freqs=list()
View(freqs)
countFreqs = function(input){
freqs=list()
for(list in input){
freq <- as.character(strsplit(list(), split = "", fixed = T)[[1]])
freq = table(freq)/length(freq)
freqs= cbind(freqs,freq)
}
return(freqs)
}
countFreqs(reads)
countFreqs = function(input){
freqs=list()
for(i in input){
freq <- as.character(strsplit(i, split = "", fixed = T)[[1]])
freq = table(freq)/length(freq)
freqs= cbind(freqs,freq)
}
return(freqs)
}
countFreqs(reads)
hell =countFreqs(reads)
hell[1]
hell[[1]]
hell
countFreqs = function(input){
freqs=list()
for(i in input){
i <- as.character(strsplit(i, split = "", fixed = T)[[1]])
i = table(i)/length(i)
freqs= cbind(freqs,i)
}
return(freqs)
}
hell =countFreqs(reads)
hello
hell
countFreqs = function(input){
freqs=list()
for(i in 1:length(input)){
freq <- as.character(strsplit(input[i], split = "", fixed = T)[[1]])
freq = table(freq)/length(freq)
freqs= cbind(freqs,freq)
colnames(freqs)[i]=i
}
return(freqs)
}
hell =countFreqs(reads)
countFreqs(reads)
countFreqs(rebuilt)
countFreqs(reads)
countFreq(rebuilt)
read_1_split <- strsplit(read_1, split = "", fixed = T)
countFreq(read_1_split)
is.list(freq[1])
hello =strsplit(reads, split = "", fixed = T)
View(hello)
splitReads =strsplit(reads, split = "", fixed = T)
dim(reads)
dim(splitReads)
x <- 1
x <- 1
for (i in 1:9) {
x <- x + 1
print(x)
}
x
rm(x)
countFun <-function(x)
{
for (i in 1:10) {
x <- x + 1
print(x)
}}
countFun(1)
x
x
countFun(1)
x <- 1
for (i in 1:9) {
x <- x + 1
print(x)
}
x= list()
system.time()
x= list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
for (i in 1:10000){
x = c(x,i^2)
}
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= list(length = 10000)
View(x)
x= list(10000)
x= list(1:10000)
View(x)
x= list(1:10000)
x= 1:10000
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= 1:10000
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= 1:10000
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= list(1:10000,0)
View(x)
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= numeric(10000)
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= numeric(10000)
system.time(expr = for (i in 1:10000){
x[i] = i^2
})
x = numeric(1:10000)
x = 1:10000
x = 1:10000
x[]= x^2
system.time(expr = x[]=x^2)
system.time(expr =
x[]=x^2)
system.time(expr = {
x[i] = i^2
})
n <- 10000 # just run this once, each time you change n
rm(x)
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
rm(x)
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
for (i in 1:5){system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
for (i in 1:5){
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
n <- 10000 # just run this once, each time you change n
rm(x)
for (i in 1:5){
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
for (i in 1:5){
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
for (i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
}
rm(x)
for (i in 1:5){
rm(x)
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
}
for (i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
n <- 10000 # just run this once, each time you change n
for (i in 1:2){
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("second function")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
n <- 100000 # just run this once, each time you change n
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("second function")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
n <- 1000000 # just run this once, each time you change n
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("second function")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}

hell =countFreqs(reads)
hell[1]
hell[[1]]
hell
countFreqs = function(input){
freqs=list()
for(i in input){
i <- as.character(strsplit(i, split = "", fixed = T)[[1]])
i = table(i)/length(i)
freqs= cbind(freqs,i)
}
return(freqs)
}
hell =countFreqs(reads)
hello
hell
countFreqs = function(input){
freqs=list()
for(i in 1:length(input)){
freq <- as.character(strsplit(input[i], split = "", fixed = T)[[1]])
freq = table(freq)/length(freq)
freqs= cbind(freqs,freq)
colnames(freqs)[i]=i
}
return(freqs)
}
hell =countFreqs(reads)
countFreqs(reads)
countFreqs(rebuilt)
countFreqs(reads)
countFreq(rebuilt)
read_1_split <- strsplit(read_1, split = "", fixed = T)
countFreq(read_1_split)
is.list(freq[1])
hello =strsplit(reads, split = "", fixed = T)
View(hello)
splitReads =strsplit(reads, split = "", fixed = T)
dim(reads)
dim(splitReads)
x <- 1
x <- 1
for (i in 1:9) {
x <- x + 1
print(x)
}
x
rm(x)
countFun <-function(x)
{
for (i in 1:10) {
x <- x + 1
print(x)
}}
countFun(1)
x
x
countFun(1)
x <- 1
for (i in 1:9) {
x <- x + 1
print(x)
}
x= list()
system.time()
x= list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
for (i in 1:10000){
x = c(x,i^2)
}
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= list(length = 10000)
View(x)
x= list(10000)
x= list(1:10000)
View(x)
x= list(1:10000)
x= 1:10000
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= 1:10000
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= 1:10000
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= list(1:10000,0)
View(x)
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x=list()
x=list()
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= numeric(10000)
system.time(expr = for (i in 1:10000){
x = c(x,i^2)
})
x= numeric(10000)
system.time(expr = for (i in 1:10000){
x[i] = i^2
})
x = numeric(1:10000)
x = 1:10000
x = 1:10000
x[]= x^2
system.time(expr = x[]=x^2)
system.time(expr =
x[]=x^2)
system.time(expr = {
x[i] = i^2
})
n <- 10000 # just run this once, each time you change n
rm(x)
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
rm(x)
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
for (i in 1:5){system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
for (i in 1:5){
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
n <- 10000 # just run this once, each time you change n
rm(x)
for (i in 1:5){
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
for (i in 1:5){
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
}
for (i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
}
rm(x)
for (i in 1:5){
rm(x)
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
}
for (i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
n <- 10000 # just run this once, each time you change n
for (i in 1:2){
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("round 2")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("second function")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
n <- 100000 # just run this once, each time you change n
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("second function")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
n <- 1000000 # just run this once, each time you change n
{
for(i in 1:5){
print(system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5))))
rm(x)
}
print("second function")
for(i in 1:5){
x <- rep(NA, n)
print(system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5)))
rm(x)
}
}
=======
library(dplyr)
?select
library(data.table)
?data.table
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
summary(dll_data)
str(dll_data)
dim(dll_data)
head(dll_data)
head(is.na(dll_data))
# or more easily
anyNA(dll_data)
sum(is.na(dll_data))
anyNA(dll_data)
dll_data_complete <- na.omit(dll_data)
dim(dll_data)
dim(dll_data_complete)
1973 - 1918
dll_data <- na.omit(dll_data)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
mean(dll_data$femur)
?mean
mean(dll_data$femur, na.rm = T )
dll_data_complete <- na.omit(dll_data)
dim(dll_data)
dim(dll_data_complete)
mean(dll_data_complete$femur)
head(duplicated(dll_data))
tail(duplicated(dll_data))
sum(duplicated(dll_data))
any(duplicated(dll_data))
anyDuplicated(dll_data)
dll_data[891,]
dll_data[890,]
dll_data[anyDuplicated(dll_data),]
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
str(dll_data2)
duplicated(dll_data2)
any(duplicated(dll_data2))
dll_data2[duplicated(dll_data2),]
str(dll_data)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
with(dll_data, table(genotype))
nrow(dll_data_wt)
levels(dll_data_wt$genotype)
dll_data_wt <- dll_data[dll_data$genotype == "wt", drop =T]
dll_data_wt <- dll_data[dll_data$genotype == "wt",, drop =T]
levels(dll_data_wt$genotype)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
levels(dll_data_wt$genotype)
dll_data_wt <- droplevels(dll_data_wt)
levels(dll_data_wt$genotype)
?gather
library(tidyr)
?gather
>>>>>>> 9187c1f92f662bee9ddbfcce78f86df69a3243c1
knitr::opts_chunk$set(echo = TRUE)
options(digits  = 3)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
# How do you want to check your data?
View(dll_data)
str(dll_data)
is.na(dll_data[i])
is.na(dll_data[1])
is.na(dll_data[,1])
x = 0
for (i in seq_along(dll_data)){
if (is.na(dll_data[,i])){
x= x+1
}
}
x = 0
for (i in seq_along(dll_data)){
if (is.na(dll_data[i,])){
x= x+1
}
}
seq_along(dll_data)
is.na(dll_data[,1])
is.na(dll_data[1,1])
is.na(dll_data[1,])
x = sum(is.na(dll_data[]))
anyNA(dll_data)
x = sum(anyNA(dll_data))
mean(dll_data$femur)
clean = na.omit(dll_data)
anyNA(clean)
duplicated(clean)
sum(duplicated(clean))
sum(duplicated(dll_data))
anyDuplicated(dll_data)
anyDuplicated(clean)
anyDuplicated(dll_data)
sum(duplicated(dll_data))
anyDuplicated(dll_data)
sum(duplicated(dll_data))
View(dll_data)
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
dll_data_unique <- unique(dll_data2)
dim(dll_data_unique)
dim(dll_data2)
dim(dll_data)
length(dll_data[1,])
print(dll_data[duplicated(dll_data)])
dll_data[duplicated(dll_data)]
dll_data[,duplicated(dll_data)]
dll_data[1:8,duplicated(dll_data)]
dll_data[[duplicated(dll_data)]]
duplicated[dll_data]
duplicated(dll_data)
dll_data[,duplicated(dll_data)]
dll_data[duplicated(dll_data),]
dll_data2[duplicated(dll_data2),]
rm(dll_data_complete, dll_data_unique, dll_data2)
rm(dll_data_complete, dll_data_unique, dll_data2,clean)
dll_data[3,1]
dll_data_wt <- dll_data[1,3]
dll_data[1,3]
dll_data_wt <- dll_data[dll_data[,3] =="wt",3]
dll_dara_wt
dll_data_wt
dll_data_wt <- dll_data[dll_data[,3] =="wt",]
dll_data_wt
View(dll_data_wt)
levels(dll_data_wt$genotype)
dll_data_wt <- droplevels(dll_data_wt)
levels(dll_data_wt$genotype)
dll_data_Dll <- subset(dll_data, genotype = "Dll")
dim(dll_data_Dll)
dll_data_Dll <- subset(dll_data, genotype == "Dll")
dim(dll_data_Dll)
levels(dll_data_Dll$genotype)
dll_data_Dll <- droplevels(dll_data_Dll)
dll_data_Dll <- subset(dll_data_Dll, line,genotype,temp,SCT)
dll_data_Dll <- dll_data_dll[2:4 8,]
dll_data_Dll <- dll_data_dll[2:4,8,]
dll_data_Dll <- subset(dll_data_dll, select = c("line","genotype","temp","SCT")
dll_data_Dll <- subset(dll_data_dll, select = c("line","genotype","temp","SCT"))
dll_data_Dll <- subset(dll_data_dll, select = c(line,genotype,temp,SCT))
View(dll_data_wt)
View(dll_data_Dll)
dll_data_Dll <- subset(dll_data_Dll, select = c(line,genotype,temp,SCT))
View(dll_data_Dll)
dim(dll_data_Dll)
match(dll_data$line, c("line-Sam", "line-1"))
dll_data$line %in% c("line-Sam","line-1")
matched_set <- dll_data$line %in% c("line-Sam","line-1")
dll_data_new_subset <- dll_data[matched_set]
dll_data_new_subset <- dll_data[,matched_set]
dll_data_new_subset <- dll_data[matched_set,]
dim(dll_data_new_subset)
rm(dll_data_Dll, dll_data_wt, dll_data_new_subset, matched_set)
levels(dll_data$line)
line_str <- as.character(dll_data$line)
str(line_str)
head(line_str)
line_names <- substr(line_str, stop = 1000000)
line_names <- substr(line_str,start, stop = 1000000)
line_names <- substr(line_str,start=0, stop = 1000000)
head(line_names)
tail(line_names)
head(line_names)
tail(line_names)
line_names <- substr(line_str,start=6, stop = 1000000L)
head(line_names)
tail(line_names)
str(line_str)
line_names3 <- gsub("line-",,line_str)
line_names3 <- gsub("line-","",line_str)
head(line_names3)
tail(line_names3)
line_names3 <- tolower(line_names3)
head(line_names3)
tail(line_names3, n = 25)
line_names3 <- gsub("sam","Samarkand", line_names3)
rm(line_names2, line_names3, line_names, line_names2_mat, line_str, new_rows)
line_names3 <- gsub("line-","",line_str)
line_str <- as.character(dll_data$line)
str(line_str)
line_names3 <- gsub("line-","",line_str)
line_names3 <- gsub("sam","Samarkand", line_names3)
tail(line_names3, n = 25)
line_names3 <- tolower(line_names3)
line_names3 <- gsub("sam","Samarkand", line_names3)
tail(line_names3, n = 25)
rm(line_names2, line_names3, line_names, line_names2_mat, line_str, new_rows)
temp_as_factor <- factor(dll_data$temp,labels = c("LowTemp","HighTemp") )
str(temp_as_factor)
head(temp_as_factor)
str(temp_as_factor)
head(temp_as_factor)
tail(temp_as_factor)
dll_data$line %in% c("line-Sam","line-1")
typeof(dll_data$temp)
temp_as_factor2 <- ifelse(dll_data$temp ==25,"LowTemp","HighTemp")
temp_as_factor2 <- factor(temp_as_factor2)
str(temp_as_factor2)
View(dll_data)
tail(temp_as_factor2)
head(temp_as_factor2)
tail(temp_as_factor2)
head(sort(dll_data$SCT))
tail(sort(dll_data$SCT))
head(order(dll_data$SCT))
tail(order(dll_data$SCT))
head(order(dll_data$SCT))
dll_data_sorted <- dll_data[dll_data$SCT]
dll_data_sorted <- dll_data[order(dll_data$SCT)]
dll_data_sorted <- dll_data[,order(dll_data$SCT)]
dll_data_sorted <- dll_data[order(dll_data$SCT),]
head(dll_data_sorted)
dll_data_sorted <- dll_data[order(dll_data$SCT,decreasing = F),]
head(dll_data_sorted)
dll_data_sorted <- dll_data[order(dll_data$SCT,decreasing = T),]
head(dll_data_sorted)
dll_data_sorted <- dll_data[order(dll_data$temp[order(dll_data$SCT),]),]
dll_data_sorted <- dll_data[order(dll_data[order(dll_data$temp),]$temp),]
head(dll_data_sorted)
dll_data_sorted <- dll_data[order(dll_data[order(dll_data$SCT),]$temp),]
head(dll_data_sorted)
head(dll_data)
dll_data_sorted <- dll_data[order(dll_data$SCT),]
dll_data_sorted <- dll_data_sorted[order(dll_data_sorted$temp),]
dll_data_sorted <- dll_data[order(dll_data$SCT),]
dll_data_sorted <- dll_data_sorted[order(dll_data_sorted$temp),]
head(dll_data_sorted)
dll_data_sorted <- dll_data[order(dll_data$SCT, dll_sorted$temp),]
dll_data_sorted <- dll_data[order(dll_data$SCT, dll_data$temp),]
head(dll_data_sorted)
line_names <- dll_data$line
elevations <- c(100, 300, 270, 250, 500, 900, 500, 1100, 500,
3000,500, 570, 150, 800, 600, 500, 1900, 100,
300, 270, 250, 500, 900, 500, 1100, 500, 600)
MeanDayTimeTemp <- c(rnorm(27, mean = 20, sd = 5))
elevation_data <- data.frame(levels(line_names),
elevations,
MeanDayTimeTemp)
names(dll_data)
names(elevation_data)
names(dll_data)
names(elevation_data)
names(elevation_data)[1] <- "line"
str(elevation_data)
merged_data <- merge(x = elevation_data,
y = dll_data)
View(merged_data)
head(merged_data)
tail(merged_data)
knitr::opts_chunk$set(echo = TRUE)
Set.seed(720)
set.seed(720)
x
set.seed(720)
x = rnorm(1000, mean = 5, sd = 1)
x
